<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

### Table of Contents

-   [Todo][1]
    -   [Parameters][2]
-   [Controller][3]
    -   [Parameters][4]
    -   [setView][5]
        -   [Parameters][6]
    -   [showAll][7]
    -   [showActive][8]
    -   [showCompleted][9]
    -   [addItem][10]
        -   [Parameters][11]
    -   [removeItem][12]
        -   [Parameters][13]
    -   [removeCompletedItems][14]
    -   [toggleComplete][15]
        -   [Parameters][16]
    -   [toggleAll][17]
        -   [Parameters][18]
    -   [\_updateCount][19]
    -   [\_filter][20]
        -   [Parameters][21]
    -   [\_updateFilterState][22]
        -   [Parameters][23]
-   [Model][24]
    -   [Parameters][25]
    -   [create][26]
        -   [Parameters][27]
    -   [read][28]
        -   [Parameters][29]
        -   [Examples][30]
    -   [update][31]
        -   [Parameters][32]
    -   [remove][33]
        -   [Parameters][34]
    -   [removeAll][35]
        -   [Parameters][36]
    -   [getCount][37]
        -   [Parameters][38]
-   [Store][39]
    -   [Parameters][40]
    -   [find][41]
        -   [Parameters][42]
        -   [Examples][43]
    -   [findAll][44]
        -   [Parameters][45]
    -   [save][46]
        -   [Parameters][47]
    -   [remove][48]
        -   [Parameters][49]
    -   [drop][50]
        -   [Parameters][51]
-   [Template][52]
    -   [show][53]
        -   [Parameters][54]
        -   [Examples][55]
    -   [itemCounter][56]
        -   [Parameters][57]
    -   [clearCompletedButton][58]
        -   [Parameters][59]
-   [View][60]
    -   [Parameters][61]
-   [extend][62]
-   [extend][63]
-   [extend][64]
    -   [Parameters][65]
-   [extend][66]
-   [extend][67]
-   [extend][68]
    -   [Parameters][69]
-   [jasmine][70]
-   [Require & Instantiate][71]
-   [setTimeout][72]
-   [setTimeout][73]
-   [html][74]
-   [html][75]
-   [env][76]
-   [env][77]
-   [jasmineInterface][78]
-   [The Global Interface][79]
-   [jasmineInterface][80]
-   [The Global Interface][81]
-   [queryString][82]
-   [Runner Parameters][83]
-   [queryString][84]
-   [Runner Parameters][85]
-   [htmlReporter][86]
-   [Reporters][87]
-   [htmlReporter][88]
-   [Reporters][89]
-   [addReporter][90]
-   [addReporter][91]
-   [specFilter][92]
-   [specFilter][93]
-   [currentWindowOnload][94]
-   [Execution][95]
-   [currentWindowOnload][96]
-   [Execution][97]
-   [jasmine.MAX_PRETTY_PRINT_DEPTH][98]
-   [jasmine.MAX_PRETTY_PRINT_DEPTH][99]
-   [jasmine.MAX_PRETTY_PRINT_ARRAY_LENGTH][100]
-   [jasmine.MAX_PRETTY_PRINT_ARRAY_LENGTH][101]
-   [jasmine.MAX_PRETTY_PRINT_CHARS][102]
-   [jasmine.MAX_PRETTY_PRINT_CHARS][103]
-   [jasmine.DEFAULT_TIMEOUT_INTERVAL][104]
-   [jasmine.DEFAULT_TIMEOUT_INTERVAL][105]
-   [jasmine.getEnv][106]
-   [jasmine.getEnv][107]
-   [jasmine.any][108]
    -   [Parameters][109]
-   [jasmine.any][110]
    -   [Parameters][111]
-   [jasmine.anything][112]
-   [jasmine.anything][113]
-   [jasmine.objectContaining][114]
    -   [Parameters][115]
-   [jasmine.objectContaining][116]
    -   [Parameters][117]
-   [jasmine.stringMatching][118]
    -   [Parameters][119]
-   [jasmine.stringMatching][120]
    -   [Parameters][121]
-   [jasmine.arrayContaining][122]
    -   [Parameters][123]
-   [jasmine.arrayContaining][124]
    -   [Parameters][125]
-   [jasmine.arrayWithExactContents][126]
    -   [Parameters][127]
-   [jasmine.arrayWithExactContents][128]
    -   [Parameters][129]
-   [jasmine.createSpy][130]
    -   [Parameters][131]
-   [jasmine.createSpy][132]
    -   [Parameters][133]
-   [jasmine.createSpyObj][134]
    -   [Parameters][135]
-   [jasmine.createSpyObj][136]
    -   [Parameters][137]
-   [result][138]
    -   [Properties][139]
-   [result][140]
    -   [Properties][141]
-   [Env][142]
-   [Env][143]
-   [Reporter][144]
-   [Reporter][145]
-   [Reporter#jasmineStarted][146]
    -   [Parameters][147]
-   [Reporter#jasmineStarted][148]
    -   [Parameters][149]
-   [Reporter#jasmineDone][150]
    -   [Parameters][151]
-   [Reporter#jasmineDone][152]
    -   [Parameters][153]
-   [Reporter#suiteStarted][154]
    -   [Parameters][155]
-   [Reporter#suiteStarted][156]
    -   [Parameters][157]
-   [Reporter#suiteDone][158]
    -   [Parameters][159]
-   [Reporter#suiteDone][160]
    -   [Parameters][161]
-   [Reporter#specStarted][162]
    -   [Parameters][163]
-   [Reporter#specStarted][164]
    -   [Parameters][165]
-   [Reporter#specDone][166]
    -   [Parameters][167]
-   [Reporter#specDone][168]
    -   [Parameters][169]
-   [jasmineStarted][170]
    -   [Properties][171]
-   [jasmineStarted][172]
    -   [Properties][173]
-   [jasmineDone][174]
    -   [Properties][175]
-   [jasmineDone][176]
    -   [Properties][177]
-   [Env#addReporter][178]
    -   [Parameters][179]
-   [Env#addReporter][180]
    -   [Parameters][181]
-   [jsApiReporter][182]
-   [jsApiReporter][183]
-   [jsApiReporter#status][184]
-   [jsApiReporter#status][185]
-   [jsApiReporter#suiteResults][186]
    -   [Parameters][187]
-   [jsApiReporter#suiteResults][188]
    -   [Parameters][189]
-   [jsApiReporter#suites][190]
-   [jsApiReporter#suites][191]
-   [jsApiReporter#specResults][192]
    -   [Parameters][193]
-   [jsApiReporter#specResults][194]
    -   [Parameters][195]
-   [jsApiReporter#specs][196]
-   [jsApiReporter#specs][197]
-   [jsApiReporter#executionTime][198]
-   [jsApiReporter#executionTime][199]
-   [Spy#calls][200]
-   [Spy#calls][201]
-   [Spy#calls#any][202]
-   [Spy#calls#any][203]
-   [Spy#calls#count][204]
-   [Spy#calls#count][205]
-   [Spy#calls#argsFor][206]
    -   [Parameters][207]
-   [Spy#calls#argsFor][208]
    -   [Parameters][209]
-   [Spy#calls#all][210]
-   [Spy#calls#all][211]
-   [Spy#calls#allArgs][212]
-   [Spy#calls#allArgs][213]
-   [Spy#calls#first][214]
-   [Spy#calls#first][215]
-   [Spy#calls#mostRecent][216]
-   [Spy#calls#mostRecent][217]
-   [Spy#calls#reset][218]
-   [Spy#calls#reset][219]
-   [Spy#calls#saveArgumentsByValue][220]
-   [Spy#calls#saveArgumentsByValue][221]
-   [Clock][222]
-   [Clock][223]
-   [Clock#install][224]
-   [Clock#install][225]
-   [Clock#uninstall][226]
-   [Clock#uninstall][227]
-   [Clock#withMock][228]
    -   [Parameters][229]
-   [Clock#withMock][230]
    -   [Parameters][231]
-   [Clock#mockDate][232]
    -   [Parameters][233]
-   [Clock#mockDate][234]
    -   [Parameters][235]
-   [Clock#tick][236]
    -   [Parameters][237]
-   [Clock#tick][238]
    -   [Parameters][239]
-   [FakeTimeout][240]
-   [FakeTimeout][241]
-   [matchers][242]
-   [matchers][243]
-   [result][244]
    -   [Properties][245]
-   [result][246]
    -   [Properties][247]
-   [matchers#nothing][248]
    -   [Examples][249]
-   [matchers#nothing][250]
    -   [Examples][251]
-   [matchers#toBe][252]
    -   [Parameters][253]
    -   [Examples][254]
-   [matchers#toBe][255]
    -   [Parameters][256]
    -   [Examples][257]
-   [matchers#toBeCloseTo][258]
    -   [Parameters][259]
    -   [Examples][260]
-   [matchers#toBeCloseTo][261]
    -   [Parameters][262]
    -   [Examples][263]
-   [matchers#toBeDefined][264]
    -   [Examples][265]
-   [matchers#toBeDefined][266]
    -   [Examples][267]
-   [matchers#toBeFalsy][268]
    -   [Examples][269]
-   [matchers#toBeFalsy][270]
    -   [Examples][271]
-   [matchers#toBeGreaterThan][272]
    -   [Parameters][273]
    -   [Examples][274]
-   [matchers#toBeGreaterThan][275]
    -   [Parameters][276]
    -   [Examples][277]
-   [matchers#toBeGreaterThanOrEqual][278]
    -   [Parameters][279]
    -   [Examples][280]
-   [matchers#toBeGreaterThanOrEqual][281]
    -   [Parameters][282]
    -   [Examples][283]
-   [matchers#toBeLessThan][284]
    -   [Parameters][285]
    -   [Examples][286]
-   [matchers#toBeLessThan][287]
    -   [Parameters][288]
    -   [Examples][289]
-   [matchers#toBeLessThanOrEqual][290]
    -   [Parameters][291]
    -   [Examples][292]
-   [matchers#toBeLessThanOrEqual][293]
    -   [Parameters][294]
    -   [Examples][295]
-   [matchers#toBeNaN][296]
    -   [Examples][297]
-   [matchers#toBeNaN][298]
    -   [Examples][299]
-   [matchers#toBeNegativeInfinity][300]
    -   [Examples][301]
-   [matchers#toBeNegativeInfinity][302]
    -   [Examples][303]
-   [matchers#toBeNull][304]
    -   [Examples][305]
-   [matchers#toBeNull][306]
    -   [Examples][307]
-   [matchers#toBePositiveInfinity][308]
    -   [Examples][309]
-   [matchers#toBePositiveInfinity][310]
    -   [Examples][311]
-   [matchers#toBeTruthy][312]
    -   [Examples][313]
-   [matchers#toBeTruthy][314]
    -   [Examples][315]
-   [matchers#toBeUndefined][316]
    -   [Examples][317]
-   [matchers#toBeUndefined][318]
    -   [Examples][319]
-   [matchers#toContain][320]
    -   [Parameters][321]
    -   [Examples][322]
-   [matchers#toContain][323]
    -   [Parameters][324]
    -   [Examples][325]
-   [matchers#toEqual][326]
    -   [Parameters][327]
    -   [Examples][328]
-   [matchers#toEqual][329]
    -   [Parameters][330]
    -   [Examples][331]
-   [matchers#toHaveBeenCalled][332]
    -   [Examples][333]
-   [matchers#toHaveBeenCalled][334]
    -   [Examples][335]
-   [matchers#toHaveBeenCalledBefore][336]
    -   [Parameters][337]
    -   [Examples][338]
-   [matchers#toHaveBeenCalledBefore][339]
    -   [Parameters][340]
    -   [Examples][341]
-   [matchers#toHaveBeenCalledTimes][342]
    -   [Parameters][343]
    -   [Examples][344]
-   [matchers#toHaveBeenCalledTimes][345]
    -   [Parameters][346]
    -   [Examples][347]
-   [matchers#toHaveBeenCalledWith][348]
    -   [Parameters][349]
    -   [Examples][350]
-   [matchers#toHaveBeenCalledWith][351]
    -   [Parameters][352]
    -   [Examples][353]
-   [matchers#toMatch][354]
    -   [Parameters][355]
    -   [Examples][356]
-   [matchers#toMatch][357]
    -   [Parameters][358]
    -   [Examples][359]
-   [matchers#toThrow][360]
    -   [Parameters][361]
    -   [Examples][362]
-   [matchers#toThrow][363]
    -   [Parameters][364]
    -   [Examples][365]
-   [matchers#toThrowError][366]
    -   [Parameters][367]
    -   [Examples][368]
-   [matchers#toThrowError][369]
    -   [Parameters][370]
    -   [Examples][371]
-   [implementationCallback][372]
    -   [Parameters][373]
-   [implementationCallback][374]
    -   [Parameters][375]
-   [jasmine][376]
-   [jasmine][377]
-   [jasmine.addCustomEqualityTester][378]
    -   [Parameters][379]
-   [jasmine.addCustomEqualityTester][380]
    -   [Parameters][381]
-   [jasmine.addMatchers][382]
    -   [Parameters][383]
-   [jasmine.addMatchers][384]
    -   [Parameters][385]
-   [jasmine.clock][386]
-   [jasmine.clock][387]
-   [Spy][388]
-   [Spy][389]
-   [Spy.callData][390]
    -   [Properties][391]
-   [Spy.callData][392]
    -   [Properties][393]
-   [Spy#and][394]
-   [Spy#and][395]
    -   [Examples][396]
-   [Spy#and#identity][397]
-   [Spy#and#exec][398]
-   [Spy#and#callThrough][399]
-   [Spy#and#returnValue][400]
    -   [Parameters][401]
-   [Spy#and#returnValues][402]
    -   [Parameters][403]
-   [Spy#and#throwError][404]
    -   [Parameters][405]
-   [Spy#and#callFake][406]
    -   [Parameters][407]
-   [Spy#and#stub][408]
-   [result][409]
    -   [Properties][410]
-   [result][411]
    -   [Properties][412]
-   [global][413]
-   [Require & Instantiate][414]
-   [jasmine.truthy][415]
-   [jasmine.falsy][416]
-   [jasmine.empty][417]
-   [jasmine.notEmpty][418]
-   [jasmine.mapContaining][419]
    -   [Parameters][420]
-   [jasmine.setContaining][421]
    -   [Parameters][422]
-   [Configuration][423]
-   [Configuration#random][424]
-   [Configuration#seed][425]
-   [Configuration#failFast][426]
-   [Configuration#failSpecWithNoExpectations][427]
-   [Configuration#oneFailurePerSpec][428]
-   [Configuration#specFilter][429]
-   [Configuration#hideDisabled][430]
-   [Configuration#Promise][431]
-   [Env#configure][432]
    -   [Parameters][433]
-   [Env#configuration][434]
-   [Env#throwOnExpectationFailure][435]
    -   [Parameters][436]
-   [Env#stopOnSpecFailure][437]
    -   [Parameters][438]
-   [Env#randomizeTests][439]
    -   [Parameters][440]
-   [Env#seed][441]
    -   [Parameters][442]
-   [Env#hideDisabled][443]
-   [Env#provideFallbackReporter][444]
    -   [Parameters][445]
-   [Env#clearReporters][446]
-   [Env#setSpecProperty][447]
    -   [Parameters][448]
-   [Env#setSuiteProperty][449]
    -   [Parameters][450]
-   [matchers#withContext][451]
    -   [Parameters][452]
-   [matchers#not][453]
    -   [Examples][454]
-   [async-matchers][455]
-   [async-matchers#withContext][456]
    -   [Parameters][457]
-   [async-matchers#not][458]
    -   [Examples][459]
-   [async-matchers#toBePending][460]
    -   [Examples][461]
-   [async-matchers#toBeRejected][462]
    -   [Examples][463]
-   [async-matchers#toBeRejectedWith][464]
    -   [Parameters][465]
    -   [Examples][466]
-   [async-matchers#toBeRejectedWithError][467]
    -   [Parameters][468]
    -   [Examples][469]
-   [async-matchers#toBeResolved][470]
    -   [Examples][471]
-   [async-matchers#toBeResolvedTo][472]
    -   [Parameters][473]
    -   [Examples][474]
-   [MatchersUtil][475]
-   [MatchersUtil#pp][476]
    -   [Parameters][477]
-   [MatchersUtil#contains][478]
    -   [Parameters][479]
-   [MatchersUtil#equals][480]
    -   [Parameters][481]
-   [matchers#toBeFalse][482]
    -   [Examples][483]
-   [matchers#toBeInstanceOf][484]
    -   [Parameters][485]
    -   [Examples][486]
-   [matchers#toBeTrue][487]
    -   [Examples][488]
-   [matchers#toHaveBeenCalledOnceWith][489]
    -   [Parameters][490]
    -   [Examples][491]
-   [matchers#toHaveClass][492]
    -   [Parameters][493]
    -   [Examples][494]
-   [matchers#toHaveSize][495]
    -   [Parameters][496]
    -   [Examples][497]
-   [matchers#toThrowMatching][498]
    -   [Parameters][499]
    -   [Examples][500]
-   [setSpecProperty][501]
    -   [Parameters][502]
-   [setSuiteProperty][503]
    -   [Parameters][504]
-   [jasmine.addAsyncMatchers][505]
    -   [Parameters][506]
-   [jasmine.addCustomObjectFormatter][507]
    -   [Parameters][508]
-   [jasmine.addSpyStrategy][509]
    -   [Parameters][510]
-   [jasmine.setDefaultSpyStrategy][511]
    -   [Parameters][512]
    -   [Examples][513]
-   [Spy#withArgs][514]
    -   [Parameters][515]
    -   [Examples][516]
-   [SpyStrategy][517]
-   [SpyStrategy#identity][518]
-   [SpyStrategy#resolveTo][519]
    -   [Parameters][520]
-   [SpyStrategy#rejectWith][521]
    -   [Parameters][522]
-   [SpyStrategy#exec][523]
-   [SpyStrategy#callThrough][524]
-   [SpyStrategy#returnValue][525]
    -   [Parameters][526]
-   [SpyStrategy#returnValues][527]
    -   [Parameters][528]
-   [SpyStrategy#throwError][529]
    -   [Parameters][530]
-   [SpyStrategy#callFake][531]
    -   [Parameters][532]
-   [SpyStrategy#stub][533]
-   [getOutputLength][534]
    -   [Parameters][535]
-   [getOutputLength][536]
    -   [Parameters][537]
-   [byteToHex][538]
-   [byteToHex][539]
-   [byteToHex][540]

## Todo

Sets up a brand new Todo list.

### Parameters

-   `name` **[string][541]** The name of your new to do list.

## Controller

Takes a model and view and acts as the controller between them

### Parameters

-   `model` **[object][542]** The model instance
-   `view` **[object][542]** The view instance

### setView

Loads and initialises the view

#### Parameters

-   `locationHash`  
-   `null` **[string][541]** '' | 'active' | 'completed'

### showAll

An event to fire on load. Will get all items and display them in the
todo-list

### showActive

Renders all active tasks

### showCompleted

Renders all completed tasks

### addItem

An event to fire whenever you want to add an item. Simply pass in the event
object and it'll handle the DOM insertion and saving of the new item.

#### Parameters

-   `title`  

### removeItem

By giving it an ID it'll find the DOM element matching that ID,
remove it from the DOM and also remove it from storage.

#### Parameters

-   `id` **[number][543]** The ID of the item to remove from the DOM and
    storage

### removeCompletedItems

Will remove all completed items from the DOM and storage.

### toggleComplete

Give it an ID of a model and a checkbox and it will update the item
in storage based on the checkbox's state.

#### Parameters

-   `id` **[number][543]** The ID of the element to complete or uncomplete
-   `completed`  
-   `silent` **([boolean][544] \| [undefined][545])** Prevent re-filtering the todo items
-   `checkbox` **[object][542]** The checkbox to check the state of complete
                             or not

### toggleAll

Will toggle ALL checkboxes' on/off state and completeness of models.
Just pass in the event object.

#### Parameters

-   `completed`  

### \_updateCount

Updates the pieces of the page which change depending on the remaining
number of todos.

### \_filter

Re-filters the todo items, based on the active route.

#### Parameters

-   `force` **([boolean][544] \| [undefined][545])** forces a re-painting of todo items.

### \_updateFilterState

Simply updates the filter nav's selected states

#### Parameters

-   `currentPage`  

## Model

Creates a new Model instance and hooks up the storage.

### Parameters

-   `storage` **[object][542]** A reference to the client side storage class

### create

Creates a new todo model

#### Parameters

-   `title` **[string][541]?** The title of the task
-   `callback` **[function][546]?** The callback to fire after the model is created

### read

Finds and returns a model in storage. If no query is given it'll simply
return everything. If you pass in a string or number it'll look that up as
the ID of the model to find. Lastly, you can pass it an object to match
against.

#### Parameters

-   `query` **([string][541] \| [number][543] \| [object][542])?** A query to match models against
-   `callback` **[function][546]?** The callback to fire after the model is found

#### Examples

```javascript
model.read(1, func); // Will find the model with an ID of 1
model.read('1'); // Same as above
//Below will find a model with foo equalling bar and hello equalling world.
model.read({ foo: 'bar', hello: 'world' });
```

### update

Updates a model by giving it an ID, data to update, and a callback to fire when
the update is complete.

#### Parameters

-   `id` **[number][543]** The id of the model to update
-   `data` **[object][542]** The properties to update and their new value
-   `callback` **[function][546]** The callback to fire when the update is complete.

### remove

Removes a model from storage

#### Parameters

-   `id` **[number][543]** The ID of the model to remove
-   `callback` **[function][546]** The callback to fire when the removal is complete.

### removeAll

WARNING: Will remove ALL data from storage.

#### Parameters

-   `callback` **[function][546]** The callback to fire when the storage is wiped.

### getCount

Returns a count of all todos

#### Parameters

-   `callback`  

## Store

Creates a new client side storage object and will create an empty
collection if no collection already exists.

### Parameters

-   `name` **[string][541]** The name of our DB we want to use
-   `callback` **[function][546]** Our fake DB uses callbacks because in
    real life you probably would be making AJAX calls

### find

Finds items based on a query given as a JS object

#### Parameters

-   `query` **[object][542]** The query to match against (i.e. {foo: 'bar'})
-   `callback` **[function][546]** The callback to fire when the query has
    completed running

#### Examples

```javascript
db.find({foo: 'bar', hello: 'world'}, function (data) {
 // data will return any items that have foo: bar and
 // hello: world in their properties
});
```

### findAll

Will retrieve all data from the collection

#### Parameters

-   `callback` **[function][546]** The callback to fire upon retrieving data

### save

Will save the given data to the DB. If no item exists it will create a new
item, otherwise it'll simply update an existing item's properties

#### Parameters

-   `updateData` **[object][542]** The data to save back into the DB
-   `callback` **[function][546]** The callback to fire after saving
-   `id` **[number][543]** An optional param to enter an ID of an item to update

### remove

Will remove an item from the Store based on its ID

#### Parameters

-   `id` **[number][543]** The ID of the item you want to remove
-   `callback` **[function][546]** The callback to fire after saving

### drop

Will drop all storage and start fresh

#### Parameters

-   `callback` **[function][546]** The callback to fire after dropping the data

## Template

Sets up defaults for all the Template methods such as a default template

### show

Creates an <li> HTML string and returns it for placement in your app.

NOTE: In real life you should be using a templating engine such as Mustache
or Handlebars, however, this is a vanilla JS example.

#### Parameters

-   `data` **[object][542]** The object containing keys you want to find in the
                         template to replace.

#### Examples

```javascript
view.show({
id: 1,
title: "Hello World",
completed: 0,
});
```

Returns **[string][541]** HTML String of an <li> element

### itemCounter

Displays a counter of how many to dos are left to complete

#### Parameters

-   `activeTodos` **[number][543]** The number of active todos.

Returns **[string][541]** String containing the count

### clearCompletedButton

Updates the text within the "Clear completed" button

#### Parameters

-   `completedTodos` **\[type]** The number of completed todos.

Returns **[string][541]** String containing the count

## View

View that abstracts away the browser's DOM completely.
It has two simple entry points:

-   bind(eventName, handler)
    Takes a todo application event and registers the handler
-   render(command, parameterObject)
    Renders the given command with the options

### Parameters

-   `template`  

## extend

Starting with version 2.0, this file "boots" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js` and `jasmine_html.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.

If a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.

The location of `boot.js` can be specified and/or overridden in `jasmine.yml`.

[jasmine-gem]: http://github.com/pivotal/jasmine-gem

## extend

Add all of the Jasmine global/public interface to the global scope, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.

## extend

Helper function for readability above.

### Parameters

-   `destination`  
-   `source`  

## extend

Starting with version 2.0, this file "boots" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js` and `jasmine_html.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.

If a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.

The location of `boot.js` can be specified and/or overridden in `jasmine.yml`.

[jasmine-gem]: http://github.com/pivotal/jasmine-gem

## extend

Add all of the Jasmine global/public interface to the global scope, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.

## extend

Helper function for readability above.

### Parameters

-   `destination`  
-   `source`  

## jasmine

## Require & Instantiate

Require Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.

## setTimeout

Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.

## setTimeout

Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.

## html

Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.

## html

Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.

## env

Create the Jasmine environment. This is used to run all specs in a project.

## env

Create the Jasmine environment. This is used to run all specs in a project.

## jasmineInterface

## The Global Interface

Build up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.

## jasmineInterface

## The Global Interface

Build up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.

## queryString

## Runner Parameters

More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.

## queryString

## Runner Parameters

More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.

## htmlReporter

## Reporters

The `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).

## htmlReporter

## Reporters

The `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).

## addReporter

The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.

## addReporter

The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.

## specFilter

Filter which specs will be run by matching the start of the full name against the `spec` query param.

## specFilter

Filter which specs will be run by matching the start of the full name against the `spec` query param.

## currentWindowOnload

## Execution

Replace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.

## currentWindowOnload

## Execution

Replace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.

## jasmine.MAX_PRETTY_PRINT_DEPTH

Maximum object depth the pretty printer will print to.
Set this to a lower value to speed up pretty printing if you have large objects.

## jasmine.MAX_PRETTY_PRINT_DEPTH

Maximum object depth the pretty printer will print to.
Set this to a lower value to speed up pretty printing if you have large objects.

**Meta**

-   **since**: 1.3.0

## jasmine.MAX_PRETTY_PRINT_ARRAY_LENGTH

Maximum number of array elements to display when pretty printing objects.
This will also limit the number of keys and values displayed for an object.
Elements past this number will be ellipised.

## jasmine.MAX_PRETTY_PRINT_ARRAY_LENGTH

Maximum number of array elements to display when pretty printing objects.
This will also limit the number of keys and values displayed for an object.
Elements past this number will be ellipised.

**Meta**

-   **since**: 2.7.0

## jasmine.MAX_PRETTY_PRINT_CHARS

Maximum number of charasters to display when pretty printing objects.
Characters past this number will be ellipised.

## jasmine.MAX_PRETTY_PRINT_CHARS

Maximum number of characters to display when pretty printing objects.
Characters past this number will be ellipised.

**Meta**

-   **since**: 2.9.0

## jasmine.DEFAULT_TIMEOUT_INTERVAL

Default number of milliseconds Jasmine will wait for an asynchronous spec to complete.

## jasmine.DEFAULT_TIMEOUT_INTERVAL

Default number of milliseconds Jasmine will wait for an asynchronous spec to complete.

**Meta**

-   **since**: 1.3.0

## jasmine.getEnv

Get the currently booted Jasmine Environment.

Returns **[Env][547]** 

## jasmine.getEnv

Get the currently booted Jasmine Environment.

Returns **[Env][547]** 

**Meta**

-   **since**: 1.3.0

## jasmine.any

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is an instance of the specified class/constructor.

### Parameters

-   `clazz` **[Constructor][548]** The constructor to check against.

## jasmine.any

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is an instance of the specified class/constructor.

### Parameters

-   `clazz` **[Constructor][548]** The constructor to check against.

**Meta**

-   **since**: 1.3.0

## jasmine.anything

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is not `null` and not `undefined`.

## jasmine.anything

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is not `null` and not `undefined`.

**Meta**

-   **since**: 2.2.0

## jasmine.objectContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared contains at least the keys and values.

### Parameters

-   `sample` **[Object][542]** The subset of properties that _must_ be in the actual.

## jasmine.objectContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared contains at least the keys and values.

### Parameters

-   `sample` **[Object][542]** The subset of properties that _must_ be in the actual.

**Meta**

-   **since**: 1.3.0

## jasmine.stringMatching

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is a `String` that matches the `RegExp` or `String`.

### Parameters

-   `expected` **([RegExp][549] \| [String][541])** 

## jasmine.stringMatching

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is a `String` that matches the `RegExp` or `String`.

### Parameters

-   `expected` **([RegExp][549] \| [String][541])** 

**Meta**

-   **since**: 2.2.0

## jasmine.arrayContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is an `Array` that contains at least the elements in the sample.

### Parameters

-   `sample` **[Array][550]** 

## jasmine.arrayContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is an `Array` that contains at least the elements in the sample.

### Parameters

-   `sample` **[Array][550]** 

**Meta**

-   **since**: 2.2.0

## jasmine.arrayWithExactContents

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is an `Array` that contains all of the elements in the sample in any order.

### Parameters

-   `sample` **[Array][550]** 

## jasmine.arrayWithExactContents

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value is an `Array` that contains all of the elements in the sample in any order.

### Parameters

-   `sample` **[Array][550]** 

**Meta**

-   **since**: 2.8.0

## jasmine.createSpy

Create a bare [Spy][388] object. This won't be installed anywhere and will not have any implementation behind it.

### Parameters

-   `name` **[String][541]?** Name to give the spy. This will be displayed in failure messages.
-   `originalFn` **[Function][546]?** Function to act as the real implementation.

Returns **[Spy][551]** 

## jasmine.createSpy

Create a bare [Spy][388] object. This won't be installed anywhere and will not have any implementation behind it.

### Parameters

-   `name` **[String][541]?** Name to give the spy. This will be displayed in failure messages.
-   `originalFn` **[Function][546]?** Function to act as the real implementation.

Returns **[Spy][551]** 

**Meta**

-   **since**: 1.3.0

## jasmine.createSpyObj

Create an object with multiple [Spy][388]s as its members.

### Parameters

-   `baseName` **[String][541]?** Base name for the spies in the object.
-   `methodNames` **([Array][550]&lt;[String][541]> | [Object][542])** Array of method names to create spies for, or Object whose keys will be method names and values the [returnValue][400].

Returns **[Object][542]** 

## jasmine.createSpyObj

Create an object with multiple [Spy][388]s as its members.

### Parameters

-   `baseName` **[String][541]?** Base name for the spies in the object.
-   `methodNames` **([Array][550]&lt;[String][541]> | [Object][542])** Array of method names to create spies for, or Object whose keys will be method names and values the [returnValue][400].
-   `propertyNames` **([Array][550]&lt;[String][541]> | [Object][542])?** Array of property names to create spies for, or Object whose keys will be propertynames and values the [returnValue][400].

Returns **[Object][542]** 

**Meta**

-   **since**: 1.3.0

## result

### Properties

-   `id` **Int** The unique id of this spec.
-   `description` **[String][541]** The description passed to the [it][552] that created this spec.
-   `fullName` **[String][541]** The full description including all ancestors of this spec.
-   `failedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that failed during execution of this spec.
-   `passedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that passed during execution of this spec.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** The list of deprecation warnings that occurred during execution this spec.
-   `pendingReason` **[String][541]** If the spec is [pending][553], this will be the reason.
-   `status` **[String][541]** Once the spec has completed, this string represents the pass/fail status of this spec.

## result

### Properties

-   `id` **Int** The unique id of this spec.
-   `description` **[String][541]** The description passed to the [it][552] that created this spec.
-   `fullName` **[String][541]** The full description including all ancestors of this spec.
-   `failedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that failed during execution of this spec.
-   `passedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that passed during execution of this spec.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** The list of deprecation warnings that occurred during execution this spec.
-   `pendingReason` **[String][541]** If the spec is [pending][553], this will be the reason.
-   `status` **[String][541]** Once the spec has completed, this string represents the pass/fail status of this spec.
-   `duration` **[number][543]** The time in ms used by the spec execution, including any before/afterEach.
-   `properties` **[Object][542]** User-supplied properties, if any, that were set using [Env#setSpecProperty][447]

## Env

_Note:_ Do not construct this directly, Jasmine will make one during booting.

## Env

_Note:_ Do not construct this directly, Jasmine will make one during booting.

**Meta**

-   **since**: 2.0.0

## Reporter

This represents the available reporter callback for an object passed to [Env#addReporter][178].

## Reporter

-   **See: custom_reporter
    **

This represents the available reporter callback for an object passed to [Env#addReporter][178].

## Reporter#jasmineStarted

`jasmineStarted` is called after all of the specs have been loaded, but just before execution starts.

### Parameters

-   `suiteInfo` **JasmineStartedInfo** Information about the full Jasmine suite that is being run

## Reporter#jasmineStarted

-   **See: async
    **

`jasmineStarted` is called after all of the specs have been loaded, but just before execution starts.

### Parameters

-   `suiteInfo` **JasmineStartedInfo** Information about the full Jasmine suite that is being run
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## Reporter#jasmineDone

When the entire suite has finished execution `jasmineDone` is called

### Parameters

-   `suiteInfo` **JasmineDoneInfo** Information about the full Jasmine suite that just finished running.

## Reporter#jasmineDone

-   **See: async
    **

When the entire suite has finished execution `jasmineDone` is called

### Parameters

-   `suiteInfo` **JasmineDoneInfo** Information about the full Jasmine suite that just finished running.
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## Reporter#suiteStarted

`suiteStarted` is invoked when a `describe` starts to run

### Parameters

-   `result` **SuiteResult** Information about the individual [describe][554] being run

## Reporter#suiteStarted

-   **See: async
    **

`suiteStarted` is invoked when a `describe` starts to run

### Parameters

-   `result` **SuiteResult** Information about the individual [describe][554] being run
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## Reporter#suiteDone

`suiteDone` is invoked when all of the child specs and suites for a given suite have been run

While jasmine doesn't require any specific functions, not defining a `suiteDone` will make it impossible for a reporter to know when a suite has failures in an `afterAll`.

### Parameters

-   `result` **SuiteResult** 

## Reporter#suiteDone

-   **See: async
    **

`suiteDone` is invoked when all of the child specs and suites for a given suite have been run

While jasmine doesn't require any specific functions, not defining a `suiteDone` will make it impossible for a reporter to know when a suite has failures in an `afterAll`.

### Parameters

-   `result` **SuiteResult** 
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## Reporter#specStarted

`specStarted` is invoked when an `it` starts to run (including associated `beforeEach` functions)

### Parameters

-   `result` **SpecResult** Information about the individual [it][552] being run

## Reporter#specStarted

-   **See: async
    **

`specStarted` is invoked when an `it` starts to run (including associated `beforeEach` functions)

### Parameters

-   `result` **SpecResult** Information about the individual [it][552] being run
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## Reporter#specDone

`specDone` is invoked when an `it` and its associated `beforeEach` and `afterEach` functions have been run.

While jasmine doesn't require any specific functions, not defining a `specDone` will make it impossible for a reporter to know when a spec has failed.

### Parameters

-   `result` **SpecResult** 

## Reporter#specDone

-   **See: async
    **

`specDone` is invoked when an `it` and its associated `beforeEach` and `afterEach` functions have been run.

While jasmine doesn't require any specific functions, not defining a `specDone` will make it impossible for a reporter to know when a spec has failed.

### Parameters

-   `result` **SpecResult** 
-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## jasmineStarted

Information passed to the [Reporter#jasmineStarted][146] event.

### Properties

-   `totalSpecsDefined` **Int** The total number of specs defined in this suite.
-   `order` **Order** Information about the ordering (random or not) of this execution of the suite.

## jasmineStarted

Information passed to the [Reporter#jasmineStarted][146] event.

### Properties

-   `totalSpecsDefined` **Int** The total number of specs defined in this suite.
-   `order` **Order** Information about the ordering (random or not) of this execution of the suite.

## jasmineDone

Information passed to the [Reporter#jasmineDone][150] event.

### Properties

-   `order` **Order** Information about the ordering (random or not) of this execution of the suite.
-   `failedExpectations` **[Array][550]&lt;Expectation>** List of expectations that failed in an [afterAll][555] at the global level.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** List of deprecation warnings that occurred at the global level.

## jasmineDone

Information passed to the [Reporter#jasmineDone][150] event.

### Properties

-   `overallStatus` **OverallStatus** The overall result of the suite: 'passed', 'failed', or 'incomplete'.
-   `totalTime` **Int** The total time (in ms) that it took to execute the suite
-   `incompleteReason` **IncompleteReason** Explanation of why the suite was incomplete.
-   `order` **Order** Information about the ordering (random or not) of this execution of the suite.
-   `failedExpectations` **[Array][550]&lt;Expectation>** List of expectations that failed in an [afterAll][555] at the global level.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** List of deprecation warnings that occurred at the global level.

## Env#addReporter

-   **See: custom_reporter
    **

Add a custom reporter to the Jasmine environment.

### Parameters

-   `reporterToAdd` **[Reporter][556]** The reporter to be added.

## Env#addReporter

-   **See: custom_reporter
    **

Add a custom reporter to the Jasmine environment.

### Parameters

-   `reporterToAdd` **[Reporter][556]** The reporter to be added.

**Meta**

-   **since**: 2.0.0

## jsApiReporter

## jsApiReporter

## jsApiReporter#status

Get the current status for the Jasmine environment.

Returns **[String][541]** One of `loaded`, `started`, or `done`

## jsApiReporter#status

Get the current status for the Jasmine environment.

Returns **[String][541]** One of `loaded`, `started`, or `done`

**Meta**

-   **since**: 2.0.0

## jsApiReporter#suiteResults

Get the results for a set of suites.

Retrievable in slices for easier serialization.

### Parameters

-   `index` **[Number][543]** The position in the suites list to start from.
-   `length` **[Number][543]** Maximum number of suite results to return.

Returns **[Array][550]&lt;SuiteResult>** 

## jsApiReporter#suiteResults

Get the results for a set of suites.

Retrievable in slices for easier serialization.

### Parameters

-   `index` **[Number][543]** The position in the suites list to start from.
-   `length` **[Number][543]** Maximum number of suite results to return.

Returns **[Array][550]&lt;SuiteResult>** 

**Meta**

-   **since**: 2.1.0

## jsApiReporter#suites

Get all of the suites in a single object, with their `id` as the key.

Returns **[Object][542]** Map of suite id to [SuiteResult][557]

## jsApiReporter#suites

Get all of the suites in a single object, with their `id` as the key.

Returns **[Object][542]** Map of suite id to [SuiteResult][557]

**Meta**

-   **since**: 2.0.0

## jsApiReporter#specResults

Get the results for a set of specs.

Retrievable in slices for easier serialization.

### Parameters

-   `index` **[Number][543]** The position in the specs list to start from.
-   `length` **[Number][543]** Maximum number of specs results to return.

Returns **[Array][550]&lt;SpecResult>** 

## jsApiReporter#specResults

Get the results for a set of specs.

Retrievable in slices for easier serialization.

### Parameters

-   `index` **[Number][543]** The position in the specs list to start from.
-   `length` **[Number][543]** Maximum number of specs results to return.

Returns **[Array][550]&lt;SpecResult>** 

**Meta**

-   **since**: 2.0.0

## jsApiReporter#specs

Get all spec results.

Returns **[Array][550]&lt;SpecResult>** 

## jsApiReporter#specs

Get all spec results.

Returns **[Array][550]&lt;SpecResult>** 

**Meta**

-   **since**: 2.0.0

## jsApiReporter#executionTime

Get the number of milliseconds it took for the full Jasmine suite to run.

Returns **[Number][543]** 

## jsApiReporter#executionTime

Get the number of milliseconds it took for the full Jasmine suite to run.

Returns **[Number][543]** 

**Meta**

-   **since**: 2.0.0

## Spy#calls

## Spy#calls

**Meta**

-   **since**: 2.0.0

## Spy#calls#any

Check whether this spy has been invoked.

Returns **[Boolean][544]** 

## Spy#calls#any

Check whether this spy has been invoked.

Returns **[Boolean][544]** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#count

Get the number of invocations of this spy.

Returns **Integer** 

## Spy#calls#count

Get the number of invocations of this spy.

Returns **Integer** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#argsFor

Get the arguments that were passed to a specific invocation of this spy.

### Parameters

-   `index` **Integer** The 0-based invocation index.

Returns **[Array][550]** 

## Spy#calls#argsFor

Get the arguments that were passed to a specific invocation of this spy.

### Parameters

-   `index` **Integer** The 0-based invocation index.

Returns **[Array][550]** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#all

Get the raw calls array for this spy.

Returns **[Array][550]&lt;[Spy.callData][558]>** 

## Spy#calls#all

Get the raw calls array for this spy.

Returns **[Array][550]&lt;[Spy.callData][558]>** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#allArgs

Get all of the arguments for each invocation of this spy in the order they were received.

Returns **[Array][550]** 

## Spy#calls#allArgs

Get all of the arguments for each invocation of this spy in the order they were received.

Returns **[Array][550]** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#first

Get the first invocation of this spy.

Returns **ObjecSpy.callData** 

## Spy#calls#first

Get the first invocation of this spy.

Returns **ObjecSpy.callData** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#mostRecent

Get the most recent invocation of this spy.

Returns **ObjecSpy.callData** 

## Spy#calls#mostRecent

Get the most recent invocation of this spy.

Returns **ObjecSpy.callData** 

**Meta**

-   **since**: 2.0.0

## Spy#calls#reset

Reset this spy as if it has never been called.

## Spy#calls#reset

Reset this spy as if it has never been called.

**Meta**

-   **since**: 2.0.0

## Spy#calls#saveArgumentsByValue

Set this spy to do a shallow clone of arguments passed to each invocation.

## Spy#calls#saveArgumentsByValue

Set this spy to do a shallow clone of arguments passed to each invocation.

**Meta**

-   **since**: 2.5.0

## Clock

_Note:_ Do not construct this directly, Jasmine will make one during booting. You can get the current clock with [jasmine.clock][386].

## Clock

_Note:_ Do not construct this directly, Jasmine will make one during booting. You can get the current clock with [jasmine.clock][386].

## Clock#install

Install the mock clock over the built-in methods.

Returns **[Clock][559]** 

## Clock#install

Install the mock clock over the built-in methods.

Returns **[Clock][559]** 

**Meta**

-   **since**: 2.0.0

## Clock#uninstall

Uninstall the mock clock, returning the built-in methods to their places.

## Clock#uninstall

Uninstall the mock clock, returning the built-in methods to their places.

**Meta**

-   **since**: 2.0.0

## Clock#withMock

Execute a function with a mocked Clock

The clock will be [install][224]ed before the function is called and [uninstall][226]ed in a `finally` after the function completes.

### Parameters

-   `Function` **closure** The function to be called.

## Clock#withMock

Execute a function with a mocked Clock

The clock will be [install][224]ed before the function is called and [uninstall][226]ed in a `finally` after the function completes.

### Parameters

-   `closure` **[Function][546]** The function to be called.

**Meta**

-   **since**: 2.3.0

## Clock#mockDate

Instruct the installed Clock to also mock the date returned by `new Date()`

### Parameters

-   `initialDate` **[Date][560]** The `Date` to provide. (optional, default `now`)

## Clock#mockDate

Instruct the installed Clock to also mock the date returned by `new Date()`

### Parameters

-   `initialDate` **[Date][560]** The `Date` to provide. (optional, default `now`)

**Meta**

-   **since**: 2.1.0

## Clock#tick

Tick the Clock forward, running any enqueued timeouts along the way

### Parameters

-   `millis` **int** The number of milliseconds to tick.

## Clock#tick

Tick the Clock forward, running any enqueued timeouts along the way

### Parameters

-   `millis` **int** The number of milliseconds to tick.

**Meta**

-   **since**: 1.3.0

## FakeTimeout

Mocks Node.js Timeout class

## FakeTimeout

Mocks Node.js Timeout class

## matchers

Matchers that come with Jasmine out of the box.

## matchers

Matchers that come with Jasmine out of the box.

## result

### Properties

-   `matcherName` **[String][541]** The name of the matcher that was executed for this expectation.
-   `message` **[String][541]** The failure message for the expectation.
-   `stack` **[String][541]** The stack trace for the failure if available.
-   `passed` **[Boolean][544]** Whether the expectation passed or failed.
-   `expected` **[Object][542]** If the expectation failed, what was the expected value.
-   `actual` **[Object][542]** If the expectation failed, what actual value was produced.

## result

### Properties

-   `matcherName` **[String][541]** The name of the matcher that was executed for this expectation.
-   `message` **[String][541]** The failure message for the expectation.
-   `stack` **[String][541]** The stack trace for the failure if available.
-   `passed` **[Boolean][544]** Whether the expectation passed or failed.
-   `expected` **[Object][542]** If the expectation failed, what was the expected value.
-   `actual` **[Object][542]** If the expectation failed, what actual value was produced.

## matchers#nothing

[expect][561] nothing explicitly.

### Examples

```javascript
expect().nothing();
```

## matchers#nothing

[expect][561] nothing explicitly.

### Examples

```javascript
expect().nothing();
```

**Meta**

-   **since**: 2.8.0

## matchers#toBe

[expect][561] the actual value to be `===` to the expected value.

### Parameters

-   `expected` **[Object][542]** The expected value to compare against.

### Examples

```javascript
expect(thing).toBe(realThing);
```

## matchers#toBe

[expect][561] the actual value to be `===` to the expected value.

### Parameters

-   `expected` **[Object][542]** The expected value to compare against.

### Examples

```javascript
expect(thing).toBe(realThing);
```

**Meta**

-   **since**: 1.3.0

## matchers#toBeCloseTo

[expect][561] the actual value to be within a specified precision of the expected value.

### Parameters

-   `expected` **[Object][542]** The expected value to compare against.
-   `precision` **[Number][543]** The number of decimal points to check. (optional, default `2`)

### Examples

```javascript
expect(number).toBeCloseTo(42.2, 3);
```

## matchers#toBeCloseTo

[expect][561] the actual value to be within a specified precision of the expected value.

### Parameters

-   `expected` **[Object][542]** The expected value to compare against.
-   `precision` **[Number][543]** The number of decimal points to check. (optional, default `2`)

### Examples

```javascript
expect(number).toBeCloseTo(42.2, 3);
```

**Meta**

-   **since**: 1.3.0

## matchers#toBeDefined

[expect][561] the actual value to be defined. (Not `undefined`)

### Examples

```javascript
expect(result).toBeDefined();
```

## matchers#toBeDefined

[expect][561] the actual value to be defined. (Not `undefined`)

### Examples

```javascript
expect(result).toBeDefined();
```

**Meta**

-   **since**: 1.3.0

## matchers#toBeFalsy

[expect][561] the actual value to be falsy

### Examples

```javascript
expect(result).toBeFalsy();
```

## matchers#toBeFalsy

[expect][561] the actual value to be falsy

### Examples

```javascript
expect(result).toBeFalsy();
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeGreaterThan

[expect][561] the actual value to be greater than the expected value.

### Parameters

-   `expected` **[Number][543]** The value to compare against.

### Examples

```javascript
expect(result).toBeGreaterThan(3);
```

## matchers#toBeGreaterThan

[expect][561] the actual value to be greater than the expected value.

### Parameters

-   `expected` **[Number][543]** The value to compare against.

### Examples

```javascript
expect(result).toBeGreaterThan(3);
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeGreaterThanOrEqual

[expect][561] the actual value to be greater than or equal to the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeGreaterThanOrEqual(25);
```

## matchers#toBeGreaterThanOrEqual

[expect][561] the actual value to be greater than or equal to the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeGreaterThanOrEqual(25);
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeLessThan

[expect][561] the actual value to be less than the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeLessThan(0);
```

## matchers#toBeLessThan

[expect][561] the actual value to be less than the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeLessThan(0);
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeLessThanOrEqual

[expect][561] the actual value to be less than or equal to the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeLessThanOrEqual(123);
```

## matchers#toBeLessThanOrEqual

[expect][561] the actual value to be less than or equal to the expected value.

### Parameters

-   `expected` **[Number][543]** The expected value to compare against.

### Examples

```javascript
expect(result).toBeLessThanOrEqual(123);
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeNaN

[expect][561] the actual value to be `NaN` (Not a Number).

### Examples

```javascript
expect(thing).toBeNaN();
```

## matchers#toBeNaN

[expect][561] the actual value to be `NaN` (Not a Number).

### Examples

```javascript
expect(thing).toBeNaN();
```

**Meta**

-   **since**: 1.3.0

## matchers#toBeNegativeInfinity

[expect][561] the actual value to be `-Infinity` (-infinity).

### Examples

```javascript
expect(thing).toBeNegativeInfinity();
```

## matchers#toBeNegativeInfinity

[expect][561] the actual value to be `-Infinity` (-infinity).

### Examples

```javascript
expect(thing).toBeNegativeInfinity();
```

**Meta**

-   **since**: 2.6.0

## matchers#toBeNull

[expect][561] the actual value to be `null`.

### Examples

```javascript
expect(result).toBeNull();
```

## matchers#toBeNull

[expect][561] the actual value to be `null`.

### Examples

```javascript
expect(result).toBeNull();
```

**Meta**

-   **since**: 1.3.0

## matchers#toBePositiveInfinity

[expect][561] the actual value to be `Infinity` (infinity).

### Examples

```javascript
expect(thing).toBePositiveInfinity();
```

## matchers#toBePositiveInfinity

[expect][561] the actual value to be `Infinity` (infinity).

### Examples

```javascript
expect(thing).toBePositiveInfinity();
```

**Meta**

-   **since**: 2.6.0

## matchers#toBeTruthy

[expect][561] the actual value to be truthy.

### Examples

```javascript
expect(thing).toBeTruthy();
```

## matchers#toBeTruthy

[expect][561] the actual value to be truthy.

### Examples

```javascript
expect(thing).toBeTruthy();
```

**Meta**

-   **since**: 2.0.0

## matchers#toBeUndefined

[expect][561] the actual value to be `undefined`.

### Examples

```javascript
expect(result).toBeUndefined():
```

## matchers#toBeUndefined

[expect][561] the actual value to be `undefined`.

### Examples

```javascript
expect(result).toBeUndefined():
```

**Meta**

-   **since**: 1.3.0

## matchers#toContain

[expect][561] the actual value to contain a specific value.

### Parameters

-   `expected` **[Object][542]** The value to look for.

### Examples

```javascript
expect(array).toContain(anElement);
expect(string).toContain(substring);
```

## matchers#toContain

[expect][561] the actual value to contain a specific value.

### Parameters

-   `expected` **[Object][542]** The value to look for.

### Examples

```javascript
expect(array).toContain(anElement);
expect(string).toContain(substring);
```

**Meta**

-   **since**: 2.0.0

## matchers#toEqual

[expect][561] the actual value to be equal to the expected, using deep equality comparison.

### Parameters

-   `expected` **[Object][542]** Expected value

### Examples

```javascript
expect(bigObject).toEqual({"foo": ['bar', 'baz']});
```

## matchers#toEqual

[expect][561] the actual value to be equal to the expected, using deep equality comparison.

### Parameters

-   `expected` **[Object][542]** Expected value

### Examples

```javascript
expect(bigObject).toEqual({"foo": ['bar', 'baz']});
```

**Meta**

-   **since**: 1.3.0

## matchers#toHaveBeenCalled

[expect][561] the actual (a [Spy][388]) to have been called.

### Examples

```javascript
expect(mySpy).toHaveBeenCalled();
expect(mySpy).not.toHaveBeenCalled();
```

## matchers#toHaveBeenCalled

[expect][561] the actual (a [Spy][388]) to have been called.

### Examples

```javascript
expect(mySpy).toHaveBeenCalled();
expect(mySpy).not.toHaveBeenCalled();
```

**Meta**

-   **since**: 1.3.0

## matchers#toHaveBeenCalledBefore

[expect][561] the actual value (a [Spy][388]) to have been called before another [Spy][388].

### Parameters

-   `expected` **[Spy][551]** [Spy][388] that should have been called after the `actual` [Spy][388].

### Examples

```javascript
expect(mySpy).toHaveBeenCalledBefore(otherSpy);
```

## matchers#toHaveBeenCalledBefore

[expect][561] the actual value (a [Spy][388]) to have been called before another [Spy][388].

### Parameters

-   `expected` **[Spy][551]** [Spy][388] that should have been called after the `actual` [Spy][388].

### Examples

```javascript
expect(mySpy).toHaveBeenCalledBefore(otherSpy);
```

**Meta**

-   **since**: 2.6.0

## matchers#toHaveBeenCalledTimes

[expect][561] the actual (a [Spy][388]) to have been called the specified number of times.

### Parameters

-   `expected` **[Number][543]** The number of invocations to look for.

### Examples

```javascript
expect(mySpy).toHaveBeenCalledTimes(3);
```

## matchers#toHaveBeenCalledTimes

[expect][561] the actual (a [Spy][388]) to have been called the specified number of times.

### Parameters

-   `expected` **[Number][543]** The number of invocations to look for.

### Examples

```javascript
expect(mySpy).toHaveBeenCalledTimes(3);
```

**Meta**

-   **since**: 2.4.0

## matchers#toHaveBeenCalledWith

[expect][561] the actual (a [Spy][388]) to have been called with particular arguments at least once.

### Parameters

-   `null-null` **...[Object][542]** The arguments to look for

### Examples

```javascript
expect(mySpy).toHaveBeenCalledWith('foo', 'bar', 2);
```

## matchers#toHaveBeenCalledWith

[expect][561] the actual (a [Spy][388]) to have been called with particular arguments at least once.

### Parameters

-   `null-null` **...[Object][542]** The arguments to look for

### Examples

```javascript
expect(mySpy).toHaveBeenCalledWith('foo', 'bar', 2);
```

**Meta**

-   **since**: 1.3.0

## matchers#toMatch

[expect][561] the actual value to match a regular expression

### Parameters

-   `expected` **([RegExp][549] \| [String][541])** Value to look for in the string.

### Examples

```javascript
expect("my string").toMatch(/string$/);
expect("other string").toMatch("her");
```

## matchers#toMatch

[expect][561] the actual value to match a regular expression

### Parameters

-   `expected` **([RegExp][549] \| [String][541])** Value to look for in the string.

### Examples

```javascript
expect("my string").toMatch(/string$/);
expect("other string").toMatch("her");
```

**Meta**

-   **since**: 1.3.0

## matchers#toThrow

[expect][561] a function to `throw` something.

### Parameters

-   `expected` **[Object][542]?** Value that should be thrown. If not provided, simply the fact that something was thrown will be checked.

### Examples

```javascript
expect(function() { return 'things'; }).toThrow('foo');
expect(function() { return 'stuff'; }).toThrow();
```

## matchers#toThrow

[expect][561] a function to `throw` something.

### Parameters

-   `expected` **[Object][542]?** Value that should be thrown. If not provided, simply the fact that something was thrown will be checked.

### Examples

```javascript
expect(function() { return 'things'; }).toThrow('foo');
expect(function() { return 'stuff'; }).toThrow();
```

**Meta**

-   **since**: 2.0.0

## matchers#toThrowError

[expect][561] a function to `throw` an `Error`.

### Parameters

-   `expected` **[Error][562]?** `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used.
-   `message` **([RegExp][549] \| [String][541])?** The message that should be set on the thrown `Error`

### Examples

```javascript
expect(function() { return 'things'; }).toThrowError(MyCustomError, 'message');
expect(function() { return 'things'; }).toThrowError(MyCustomError, /bar/);
expect(function() { return 'stuff'; }).toThrowError(MyCustomError);
expect(function() { return 'other'; }).toThrowError(/foo/);
expect(function() { return 'other'; }).toThrowError();
```

## matchers#toThrowError

[expect][561] a function to `throw` an `Error`.

### Parameters

-   `expected` **[Error][562]?** `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used.
-   `message` **([RegExp][549] \| [String][541])?** The message that should be set on the thrown `Error`

### Examples

```javascript
expect(function() { return 'things'; }).toThrowError(MyCustomError, 'message');
expect(function() { return 'things'; }).toThrowError(MyCustomError, /bar/);
expect(function() { return 'stuff'; }).toThrowError(MyCustomError);
expect(function() { return 'other'; }).toThrowError(/foo/);
expect(function() { return 'other'; }).toThrowError();
```

**Meta**

-   **since**: 2.0.0

## implementationCallback

Callback passed to parts of the Jasmine base interface.

By default Jasmine assumes this function completes synchronously.
If you have code that you need to test asynchronously, you can declare that you receive a `done` callback, return a Promise, or use the `async` keyword if it is supported in your environment.

Type: [Function][546]

### Parameters

-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## implementationCallback

Callback passed to parts of the Jasmine base interface.

By default Jasmine assumes this function completes synchronously.
If you have code that you need to test asynchronously, you can declare that you receive a `done` callback, return a Promise, or use the `async` keyword if it is supported in your environment.

Type: [Function][546]

### Parameters

-   `done` **[Function][546]?** Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on.

## jasmine

## jasmine

## jasmine.addCustomEqualityTester

-   **See: custom_equality
    **

Add a custom equality tester for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `tester` **[Function][546]** A function which takes two arguments to compare and returns a `true` or `false` comparison result if it knows how to compare them, and `undefined` otherwise.

## jasmine.addCustomEqualityTester

-   **See: custom_equality
    **

Add a custom equality tester for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `tester` **[Function][546]** A function which takes two arguments to compare and returns a `true` or `false` comparison result if it knows how to compare them, and `undefined` otherwise.

**Meta**

-   **since**: 2.0.0

## jasmine.addMatchers

-   **See: custom_matcher
    **

Add custom matchers for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `matchers` **[Object][542]** Keys from this object will be the new matcher names.

## jasmine.addMatchers

-   **See: custom_matcher
    **

Add custom matchers for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `matchers` **[Object][542]** Keys from this object will be the new matcher names.

**Meta**

-   **since**: 2.0.0

## jasmine.clock

Get the currently booted mock {Clock} for this Jasmine environment.

Returns **[Clock][559]** 

## jasmine.clock

Get the currently booted mock {Clock} for this Jasmine environment.

Returns **[Clock][559]** 

**Meta**

-   **since**: 2.0.0

## Spy

_Note:_ Do not construct this directly, use [spyOn][565], [spyOnProperty][566], [jasmine.createSpy][130], or [jasmine.createSpyObj][134]

## Spy

_Note:_ Do not construct this directly, use [spyOn][565], [spyOnProperty][566], [jasmine.createSpy][130], or [jasmine.createSpyObj][134]

## Spy.callData

### Properties

-   `object` **[object][542]** `this` context for the invocation.
-   `invocationOrder` **[number][543]** Order of the invocation.
-   `args` **[Array][550]** The arguments passed for this invocation.

## Spy.callData

### Properties

-   `object` **[object][542]** `this` context for the invocation.
-   `invocationOrder` **[number][543]** Order of the invocation.
-   `args` **[Array][550]** The arguments passed for this invocation.

## Spy#and

## Spy#and

### Examples

```javascript
spyOn(someObj, 'func').and.returnValue(42);
```

**Meta**

-   **since**: 2.0.0

## Spy#and#identity

Return the identifying information for the spy.

Returns **[String][541]** 

## Spy#and#exec

Execute the current spy strategy.

## Spy#and#callThrough

Tell the spy to call through to the real implementation when invoked.

## Spy#and#returnValue

Tell the spy to return the value when invoked.

### Parameters

-   `value` **any** The value to return.

## Spy#and#returnValues

Tell the spy to return one of the specified values (sequentially) each time the spy is invoked.

### Parameters

-   `values` **...any** Values to be returned on subsequent calls to the spy.

## Spy#and#throwError

Tell the spy to throw an error when invoked.

### Parameters

-   `something` **([Error][562] \| [String][541])** Thing to throw

## Spy#and#callFake

Tell the spy to call a fake implementation when invoked.

### Parameters

-   `fn` **[Function][546]** The function to invoke with the passed parameters.

## Spy#and#stub

Tell the spy to do nothing when invoked. This is the default.

## result

### Properties

-   `id` **Int** The unique id of this suite.
-   `description` **[String][541]** The description text passed to the [describe][554] that made this suite.
-   `fullName` **[String][541]** The full description including all ancestors of this suite.
-   `failedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that failed in an [afterAll][555] for this suite.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** The list of deprecation warnings that occurred on this suite.
-   `status` **[String][541]** Once the suite has completed, this string represents the pass/fail status of this suite.

## result

### Properties

-   `id` **Int** The unique id of this suite.
-   `description` **[String][541]** The description text passed to the [describe][554] that made this suite.
-   `fullName` **[String][541]** The full description including all ancestors of this suite.
-   `failedExpectations` **[Array][550]&lt;Expectation>** The list of expectations that failed in an [afterAll][555] for this suite.
-   `deprecationWarnings` **[Array][550]&lt;Expectation>** The list of deprecation warnings that occurred on this suite.
-   `status` **[String][541]** Once the suite has completed, this string represents the pass/fail status of this suite.
-   `duration` **[number][543]** The time in ms for Suite execution, including any before/afterAll, before/afterEach.
-   `properties` **[Object][542]** User-supplied properties, if any, that were set using [Env#setSuiteProperty][449]

## global

## Require & Instantiate

Require Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.

## jasmine.truthy

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is `true` or anything truthy.

**Meta**

-   **since**: 3.1.0

## jasmine.falsy

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is  `null`, `undefined`, `0`, `false` or anything falsey.

**Meta**

-   **since**: 3.1.0

## jasmine.empty

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is empty.

**Meta**

-   **since**: 3.1.0

## jasmine.notEmpty

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if the actual value being compared is not empty.

**Meta**

-   **since**: 3.1.0

## jasmine.mapContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if every key/value pair in the sample passes the deep equality comparison
with at least one key/value pair in the actual value being compared

### Parameters

-   `sample` **[Map][567]** The subset of items that _must_ be in the actual.

**Meta**

-   **since**: 3.5.0

## jasmine.setContaining

Get a matcher, usable in any [matcher][242] that uses Jasmine's equality (e.g. [toEqual][326], [toContain][320], or [toHaveBeenCalledWith][348]),
that will succeed if every item in the sample passes the deep equality comparison
with at least one item in the actual value being compared

### Parameters

-   `sample` **[Set][568]** The subset of items that _must_ be in the actual.

**Meta**

-   **since**: 3.5.0

## Configuration

This represents the available options to configure Jasmine.
Options that are not provided will use their default values

**Meta**

-   **since**: 3.3.0

## Configuration#random

Whether to randomize spec execution order

**Meta**

-   **since**: 3.3.0

## Configuration#seed

Seed to use as the basis of randomization.
Null causes the seed to be determined randomly at the start of execution.

**Meta**

-   **since**: 3.3.0

## Configuration#failFast

Whether to stop execution of the suite after the first spec failure

**Meta**

-   **since**: 3.3.0

## Configuration#failSpecWithNoExpectations

Whether to fail the spec if it ran no expectations. By default
a spec that ran no expectations is reported as passed. Setting this
to true will report such spec as a failure.

**Meta**

-   **since**: 3.5.0

## Configuration#oneFailurePerSpec

Whether to cause specs to only have one expectation failure.

**Meta**

-   **since**: 3.3.0

## Configuration#specFilter

Function to use to filter specs

**Meta**

-   **since**: 3.3.0

## Configuration#hideDisabled

Whether or not reporters should hide disabled specs from their output.
Currently only supported by Jasmine's HTMLReporter

**Meta**

-   **since**: 3.3.0

## Configuration#Promise

Set to provide a custom promise library that Jasmine will use if it needs
to create a promise. If not set, it will default to whatever global Promise
library is available (if any).

**Meta**

-   **since**: 3.5.0

## Env#configure

Configure your jasmine environment

### Parameters

-   `configuration` **[Configuration][569]** 

**Meta**

-   **since**: 3.3.0

## Env#configuration

Get the current configuration for your jasmine environment

Returns **[Configuration][569]** 

**Meta**

-   **since**: 3.3.0

## Env#throwOnExpectationFailure

Sets whether Jasmine should throw an Error when an expectation fails.
This causes a spec to only have one expectation failure.

### Parameters

-   `value` **[Boolean][544]** Whether to throw when a expectation fails

**Meta**

-   **since**: 2.3.0
-   **deprecated**: Use the `oneFailurePerSpec` option with [Env#configure][432]


## Env#stopOnSpecFailure

Set whether to stop suite execution when a spec fails

### Parameters

-   `value` **[Boolean][544]** Whether to stop suite execution when a spec fails

**Meta**

-   **since**: 2.7.0
-   **deprecated**: Use the `failFast` option with [Env#configure][432]


## Env#randomizeTests

Set whether to randomize test execution order

### Parameters

-   `value` **[Boolean][544]** Whether to randomize execution order

**Meta**

-   **since**: 2.4.0
-   **deprecated**: Use the `random` option with [Env#configure][432]


## Env#seed

Set the random number seed for spec randomization

### Parameters

-   `value` **[Number][543]** The seed value

**Meta**

-   **since**: 2.4.0
-   **deprecated**: Use the `seed` option with [Env#configure][432]


## Env#hideDisabled

**Meta**

-   **since**: 3.2.0

## Env#provideFallbackReporter

-   **See: custom_reporter
    **

Provide a fallback reporter if no other reporters have been specified.

### Parameters

-   `reporterToAdd` **[Reporter][556]** The reporter

**Meta**

-   **since**: 2.5.0

## Env#clearReporters

Clear all registered reporters

**Meta**

-   **since**: 2.5.2

## Env#setSpecProperty

Sets a user-defined property that will be provided to reporters as part of the properties field of [SpecResult][570]

### Parameters

-   `key` **[String][541]** The name of the property
-   `value` **any** The value of the property

**Meta**

-   **since**: 3.6.0

## Env#setSuiteProperty

Sets a user-defined property that will be provided to reporters as part of the properties field of [SuiteResult][557]

### Parameters

-   `key` **[String][541]** The name of the property
-   `value` **any** The value of the property

**Meta**

-   **since**: 3.6.0

## matchers#withContext

Add some context for an [expect][561]

### Parameters

-   `message` **[String][541]** Additional context to show when the matcher fails

Returns **[matchers][571]** 

**Meta**

-   **since**: 3.3.0

## matchers#not

Invert the matcher following this [expect][561]

Type: [matchers][571]

### Examples

```javascript
expect(something).not.toBe(true);
```

**Meta**

-   **since**: 1.3.0

## async-matchers

Asynchronous matchers.

## async-matchers#withContext

Add some context for an [expectAsync][572]

### Parameters

-   `message` **[String][541]** Additional context to show when the async matcher fails

Returns **[async-matchers][573]** 

**Meta**

-   **since**: 3.3.0

## async-matchers#not

Invert the matcher following this [expectAsync][572]

Type: [async-matchers][573]

### Examples

```javascript
await expectAsync(myPromise).not.toBeResolved();
```

```javascript
return expectAsync(myPromise).not.toBeResolved();
```

## async-matchers#toBePending

Expect a promise to be pending, ie. the promise is neither resolved nor rejected.

### Examples

```javascript
await expectAsync(aPromise).toBePending();
```

**Meta**

-   **since**: 3.6

## async-matchers#toBeRejected

Expect a promise to be rejected.

### Examples

```javascript
await expectAsync(aPromise).toBeRejected();
```

```javascript
return expectAsync(aPromise).toBeRejected();
```

**Meta**

-   **since**: 3.1.0

## async-matchers#toBeRejectedWith

Expect a promise to be rejected with a value equal to the expected, using deep equality comparison.

### Parameters

-   `expected` **[Object][542]** Value that the promise is expected to be rejected with

### Examples

```javascript
await expectAsync(aPromise).toBeRejectedWith({prop: 'value'});
```

```javascript
return expectAsync(aPromise).toBeRejectedWith({prop: 'value'});
```

**Meta**

-   **since**: 3.3.0

## async-matchers#toBeRejectedWithError

Expect a promise to be rejected with a value matched to the expected

### Parameters

-   `expected` **[Error][562]?** `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used.
-   `message` **([RegExp][549] \| [String][541])?** The message that should be set on the thrown `Error`

### Examples

```javascript
await expectAsync(aPromise).toBeRejectedWithError(MyCustomError, 'Error message');
await expectAsync(aPromise).toBeRejectedWithError(MyCustomError, /Error message/);
await expectAsync(aPromise).toBeRejectedWithError(MyCustomError);
await expectAsync(aPromise).toBeRejectedWithError('Error message');
return expectAsync(aPromise).toBeRejectedWithError(/Error message/);
```

**Meta**

-   **since**: 3.5.0

## async-matchers#toBeResolved

Expect a promise to be resolved.

### Examples

```javascript
await expectAsync(aPromise).toBeResolved();
```

```javascript
return expectAsync(aPromise).toBeResolved();
```

**Meta**

-   **since**: 3.1.0

## async-matchers#toBeResolvedTo

Expect a promise to be resolved to a value equal to the expected, using deep equality comparison.

### Parameters

-   `expected` **[Object][542]** Value that the promise is expected to resolve to

### Examples

```javascript
await expectAsync(aPromise).toBeResolvedTo({prop: 'value'});
```

```javascript
return expectAsync(aPromise).toBeResolvedTo({prop: 'value'});
```

**Meta**

-   **since**: 3.1.0

## MatchersUtil

_Note:_ Do not construct this directly. Jasmine will construct one and
pass it to matchers and asymmetric equality testers.

## MatchersUtil#pp

Formats a value for use in matcher failure messages and similar contexts,
taking into account the current set of custom value formatters.

### Parameters

-   `value` **any** The value to pretty-print

Returns **[string][541]** The pretty-printed value

**Meta**

-   **since**: 3.6.0

## MatchersUtil#contains

Determines whether `haystack` contains `needle`, using the same comparison
logic as [MatchersUtil#equals][480].

### Parameters

-   `haystack` **any** The collection to search
-   `needle` **any** The value to search for
-   `customTesters`  An array of custom equality testers

Returns **[boolean][544]** True if `needle` was found in `haystack`

**Meta**

-   **since**: 2.0.0

## MatchersUtil#equals

Determines whether two values are deeply equal to each other.

### Parameters

-   `a` **any** The first value to compare
-   `b` **any** The second value to compare
-   `customTesters`  An array of custom equality testers

Returns **[boolean][544]** True if the values are equal

**Meta**

-   **since**: 2.0.0

## matchers#toBeFalse

[expect][561] the actual value to be `false`.

### Examples

```javascript
expect(result).toBeFalse();
```

**Meta**

-   **since**: 3.5.0

## matchers#toBeInstanceOf

[expect][561] the actual to be an instance of the expected class

### Parameters

-   `expected` **[Object][542]** The class or constructor function to check for

### Examples

```javascript
expect('foo').toBeInstanceOf(String);
expect(3).toBeInstanceOf(Number);
expect(new Error()).toBeInstanceOf(Error);
```

**Meta**

-   **since**: 3.5.0

## matchers#toBeTrue

[expect][561] the actual value to be `true`.

### Examples

```javascript
expect(result).toBeTrue();
```

**Meta**

-   **since**: 3.5.0

## matchers#toHaveBeenCalledOnceWith

[expect][561] the actual (a [Spy][388]) to have been called exactly once, and exactly with the particular arguments.

### Parameters

-   `null-null` **...[Object][542]** The arguments to look for

### Examples

```javascript
expect(mySpy).toHaveBeenCalledOnceWith('foo', 'bar', 2);
```

**Meta**

-   **since**: 3.6.0

## matchers#toHaveClass

[expect][561] the actual value to be a DOM element that has the expected class

### Parameters

-   `expected` **[Object][542]** The class name to test for

### Examples

```javascript
var el = document.createElement('div');
el.className = 'foo bar baz';
expect(el).toHaveClass('bar');
```

**Meta**

-   **since**: 3.0.0

## matchers#toHaveSize

[expect][561] the actual size to be equal to the expected, using array-like length or object keys size.

### Parameters

-   `expected` **[Object][542]** Expected size

### Examples

```javascript
array = [1,2];
expect(array).toHaveSize(2);
```

**Meta**

-   **since**: 3.6.0

## matchers#toThrowMatching

[expect][561] a function to `throw` something matching a predicate.

### Parameters

-   `predicate` **[Function][546]** A function that takes the thrown exception as its parameter and returns true if it matches.

### Examples

```javascript
expect(function() { throw new Error('nope'); }).toThrowMatching(function(thrown) { return thrown.message === 'nope'; });
```

**Meta**

-   **since**: 3.0.0

## setSpecProperty

Sets a user-defined property that will be provided to reporters as part of the properties field of [SpecResult][570]

### Parameters

-   `key` **[String][541]** The name of the property
-   `value` **any** The value of the property

**Meta**

-   **since**: 3.6.0

## setSuiteProperty

Sets a user-defined property that will be provided to reporters as part of the properties field of [SuiteResult][557]

### Parameters

-   `key` **[String][541]** The name of the property
-   `value` **any** The value of the property

**Meta**

-   **since**: 3.6.0

## jasmine.addAsyncMatchers

-   **See: custom_matcher
    **

Add custom async matchers for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `matchers` **[Object][542]** Keys from this object will be the new async matcher names.

**Meta**

-   **since**: 3.5.0

## jasmine.addCustomObjectFormatter

-   **See: custom_object_formatter
    **

Add a custom object formatter for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `formatter` **[Function][546]** A function which takes a value to format and returns a string if it knows how to format it, and `undefined` otherwise.

**Meta**

-   **since**: 3.6.0

## jasmine.addSpyStrategy

Add a custom spy strategy for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `name` **[String][541]** The name of the strategy (i.e. what you call from `and`)
-   `factory` **[Function][546]** Factory function that returns the plan to be executed.

**Meta**

-   **since**: 3.5.0

## jasmine.setDefaultSpyStrategy

Set the default spy strategy for the current scope of specs.

_Note:_ This is only callable from within a [beforeEach][563], [it][552], or [beforeAll][564].

### Parameters

-   `defaultStrategyFn` **[Function][546]** a function that assigns a strategy

### Examples

```javascript
beforeEach(function() {
  jasmine.setDefaultSpyStrategy(and => and.returnValue(true));
});
```

## Spy#withArgs

Specifies a strategy to be used for calls to the spy that have the
specified arguments.

Type: [SpyStrategy][574]

### Parameters

-   `args` **...any** The arguments to match

### Examples

```javascript
spyOn(someObj, 'func').withArgs(1, 2, 3).and.returnValue(42);
someObj.func(1, 2, 3); // returns 42
```

**Meta**

-   **since**: 3.0.0

## SpyStrategy

## SpyStrategy#identity

Get the identifying information for the spy.

Type: [String][541]

**Meta**

-   **since**: 3.0.0

## SpyStrategy#resolveTo

Tell the spy to return a promise resolving to the specified value when invoked.

### Parameters

-   `value` **any** The value to return.

**Meta**

-   **since**: 3.5.0

## SpyStrategy#rejectWith

Tell the spy to return a promise rejecting with the specified value when invoked.

### Parameters

-   `value` **any** The value to return.

**Meta**

-   **since**: 3.5.0

## SpyStrategy#exec

Execute the current spy strategy.

**Meta**

-   **since**: 2.0.0

## SpyStrategy#callThrough

Tell the spy to call through to the real implementation when invoked.

**Meta**

-   **since**: 2.0.0

## SpyStrategy#returnValue

Tell the spy to return the value when invoked.

### Parameters

-   `value` **any** The value to return.

**Meta**

-   **since**: 2.0.0

## SpyStrategy#returnValues

Tell the spy to return one of the specified values (sequentially) each time the spy is invoked.

### Parameters

-   `values` **...any** Values to be returned on subsequent calls to the spy.

**Meta**

-   **since**: 2.1.0

## SpyStrategy#throwError

Tell the spy to throw an error when invoked.

### Parameters

-   `something` **([Error][562] \| [Object][542] \| [String][541])** Thing to throw

**Meta**

-   **since**: 2.0.0

## SpyStrategy#callFake

Tell the spy to call a fake implementation when invoked.

### Parameters

-   `fn` **[Function][546]** The function to invoke with the passed parameters.

**Meta**

-   **since**: 2.0.0

## SpyStrategy#stub

Tell the spy to do nothing when invoked. This is the default.

**Meta**

-   **since**: 2.0.0

## getOutputLength

Calculate output length with padding and bit length

### Parameters

-   `inputLength8`  

## getOutputLength

Calculate output length with padding and bit length

### Parameters

-   `inputLength8`  

## byteToHex

Convert array of 16 byte values to UUID string format of the form:
XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

## byteToHex

Convert array of 16 byte values to UUID string format of the form:
XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

## byteToHex

Convert array of 16 byte values to UUID string format of the form:
XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

[1]: #todo

[2]: #parameters

[3]: #controller

[4]: #parameters-1

[5]: #setview

[6]: #parameters-2

[7]: #showall

[8]: #showactive

[9]: #showcompleted

[10]: #additem

[11]: #parameters-3

[12]: #removeitem

[13]: #parameters-4

[14]: #removecompleteditems

[15]: #togglecomplete

[16]: #parameters-5

[17]: #toggleall

[18]: #parameters-6

[19]: #_updatecount

[20]: #_filter

[21]: #parameters-7

[22]: #_updatefilterstate

[23]: #parameters-8

[24]: #model

[25]: #parameters-9

[26]: #create

[27]: #parameters-10

[28]: #read

[29]: #parameters-11

[30]: #examples

[31]: #update

[32]: #parameters-12

[33]: #remove

[34]: #parameters-13

[35]: #removeall

[36]: #parameters-14

[37]: #getcount

[38]: #parameters-15

[39]: #store

[40]: #parameters-16

[41]: #find

[42]: #parameters-17

[43]: #examples-1

[44]: #findall

[45]: #parameters-18

[46]: #save

[47]: #parameters-19

[48]: #remove-1

[49]: #parameters-20

[50]: #drop

[51]: #parameters-21

[52]: #template

[53]: #show

[54]: #parameters-22

[55]: #examples-2

[56]: #itemcounter

[57]: #parameters-23

[58]: #clearcompletedbutton

[59]: #parameters-24

[60]: #view

[61]: #parameters-25

[62]: #extend

[63]: #extend-1

[64]: #extend-2

[65]: #parameters-26

[66]: #extend-3

[67]: #extend-4

[68]: #extend-5

[69]: #parameters-27

[70]: #jasmine

[71]: #require--instantiate

[72]: #settimeout

[73]: #settimeout-1

[74]: #html

[75]: #html-1

[76]: #env

[77]: #env-1

[78]: #jasmineinterface

[79]: #the-global-interface

[80]: #jasmineinterface-1

[81]: #the-global-interface-1

[82]: #querystring

[83]: #runner-parameters

[84]: #querystring-1

[85]: #runner-parameters-1

[86]: #htmlreporter

[87]: #reporters

[88]: #htmlreporter-1

[89]: #reporters-1

[90]: #addreporter

[91]: #addreporter-1

[92]: #specfilter

[93]: #specfilter-1

[94]: #currentwindowonload

[95]: #execution

[96]: #currentwindowonload-1

[97]: #execution-1

[98]: #jasminemax_pretty_print_depth

[99]: #jasminemax_pretty_print_depth-1

[100]: #jasminemax_pretty_print_array_length

[101]: #jasminemax_pretty_print_array_length-1

[102]: #jasminemax_pretty_print_chars

[103]: #jasminemax_pretty_print_chars-1

[104]: #jasminedefault_timeout_interval

[105]: #jasminedefault_timeout_interval-1

[106]: #jasminegetenv

[107]: #jasminegetenv-1

[108]: #jasmineany

[109]: #parameters-28

[110]: #jasmineany-1

[111]: #parameters-29

[112]: #jasmineanything

[113]: #jasmineanything-1

[114]: #jasmineobjectcontaining

[115]: #parameters-30

[116]: #jasmineobjectcontaining-1

[117]: #parameters-31

[118]: #jasminestringmatching

[119]: #parameters-32

[120]: #jasminestringmatching-1

[121]: #parameters-33

[122]: #jasminearraycontaining

[123]: #parameters-34

[124]: #jasminearraycontaining-1

[125]: #parameters-35

[126]: #jasminearraywithexactcontents

[127]: #parameters-36

[128]: #jasminearraywithexactcontents-1

[129]: #parameters-37

[130]: #jasminecreatespy

[131]: #parameters-38

[132]: #jasminecreatespy-1

[133]: #parameters-39

[134]: #jasminecreatespyobj

[135]: #parameters-40

[136]: #jasminecreatespyobj-1

[137]: #parameters-41

[138]: #result

[139]: #properties

[140]: #result-1

[141]: #properties-1

[142]: #env-2

[143]: #env-3

[144]: #reporter

[145]: #reporter-1

[146]: #reporterjasminestarted

[147]: #parameters-42

[148]: #reporterjasminestarted-1

[149]: #parameters-43

[150]: #reporterjasminedone

[151]: #parameters-44

[152]: #reporterjasminedone-1

[153]: #parameters-45

[154]: #reportersuitestarted

[155]: #parameters-46

[156]: #reportersuitestarted-1

[157]: #parameters-47

[158]: #reportersuitedone

[159]: #parameters-48

[160]: #reportersuitedone-1

[161]: #parameters-49

[162]: #reporterspecstarted

[163]: #parameters-50

[164]: #reporterspecstarted-1

[165]: #parameters-51

[166]: #reporterspecdone

[167]: #parameters-52

[168]: #reporterspecdone-1

[169]: #parameters-53

[170]: #jasminestarted

[171]: #properties-2

[172]: #jasminestarted-1

[173]: #properties-3

[174]: #jasminedone

[175]: #properties-4

[176]: #jasminedone-1

[177]: #properties-5

[178]: #envaddreporter

[179]: #parameters-54

[180]: #envaddreporter-1

[181]: #parameters-55

[182]: #jsapireporter

[183]: #jsapireporter-1

[184]: #jsapireporterstatus

[185]: #jsapireporterstatus-1

[186]: #jsapireportersuiteresults

[187]: #parameters-56

[188]: #jsapireportersuiteresults-1

[189]: #parameters-57

[190]: #jsapireportersuites

[191]: #jsapireportersuites-1

[192]: #jsapireporterspecresults

[193]: #parameters-58

[194]: #jsapireporterspecresults-1

[195]: #parameters-59

[196]: #jsapireporterspecs

[197]: #jsapireporterspecs-1

[198]: #jsapireporterexecutiontime

[199]: #jsapireporterexecutiontime-1

[200]: #spycalls

[201]: #spycalls-1

[202]: #spycallsany

[203]: #spycallsany-1

[204]: #spycallscount

[205]: #spycallscount-1

[206]: #spycallsargsfor

[207]: #parameters-60

[208]: #spycallsargsfor-1

[209]: #parameters-61

[210]: #spycallsall

[211]: #spycallsall-1

[212]: #spycallsallargs

[213]: #spycallsallargs-1

[214]: #spycallsfirst

[215]: #spycallsfirst-1

[216]: #spycallsmostrecent

[217]: #spycallsmostrecent-1

[218]: #spycallsreset

[219]: #spycallsreset-1

[220]: #spycallssaveargumentsbyvalue

[221]: #spycallssaveargumentsbyvalue-1

[222]: #clock

[223]: #clock-1

[224]: #clockinstall

[225]: #clockinstall-1

[226]: #clockuninstall

[227]: #clockuninstall-1

[228]: #clockwithmock

[229]: #parameters-62

[230]: #clockwithmock-1

[231]: #parameters-63

[232]: #clockmockdate

[233]: #parameters-64

[234]: #clockmockdate-1

[235]: #parameters-65

[236]: #clocktick

[237]: #parameters-66

[238]: #clocktick-1

[239]: #parameters-67

[240]: #faketimeout

[241]: #faketimeout-1

[242]: #matchers

[243]: #matchers-1

[244]: #result-2

[245]: #properties-6

[246]: #result-3

[247]: #properties-7

[248]: #matchersnothing

[249]: #examples-3

[250]: #matchersnothing-1

[251]: #examples-4

[252]: #matcherstobe

[253]: #parameters-68

[254]: #examples-5

[255]: #matcherstobe-1

[256]: #parameters-69

[257]: #examples-6

[258]: #matcherstobecloseto

[259]: #parameters-70

[260]: #examples-7

[261]: #matcherstobecloseto-1

[262]: #parameters-71

[263]: #examples-8

[264]: #matcherstobedefined

[265]: #examples-9

[266]: #matcherstobedefined-1

[267]: #examples-10

[268]: #matcherstobefalsy

[269]: #examples-11

[270]: #matcherstobefalsy-1

[271]: #examples-12

[272]: #matcherstobegreaterthan

[273]: #parameters-72

[274]: #examples-13

[275]: #matcherstobegreaterthan-1

[276]: #parameters-73

[277]: #examples-14

[278]: #matcherstobegreaterthanorequal

[279]: #parameters-74

[280]: #examples-15

[281]: #matcherstobegreaterthanorequal-1

[282]: #parameters-75

[283]: #examples-16

[284]: #matcherstobelessthan

[285]: #parameters-76

[286]: #examples-17

[287]: #matcherstobelessthan-1

[288]: #parameters-77

[289]: #examples-18

[290]: #matcherstobelessthanorequal

[291]: #parameters-78

[292]: #examples-19

[293]: #matcherstobelessthanorequal-1

[294]: #parameters-79

[295]: #examples-20

[296]: #matcherstobenan

[297]: #examples-21

[298]: #matcherstobenan-1

[299]: #examples-22

[300]: #matcherstobenegativeinfinity

[301]: #examples-23

[302]: #matcherstobenegativeinfinity-1

[303]: #examples-24

[304]: #matcherstobenull

[305]: #examples-25

[306]: #matcherstobenull-1

[307]: #examples-26

[308]: #matcherstobepositiveinfinity

[309]: #examples-27

[310]: #matcherstobepositiveinfinity-1

[311]: #examples-28

[312]: #matcherstobetruthy

[313]: #examples-29

[314]: #matcherstobetruthy-1

[315]: #examples-30

[316]: #matcherstobeundefined

[317]: #examples-31

[318]: #matcherstobeundefined-1

[319]: #examples-32

[320]: #matcherstocontain

[321]: #parameters-80

[322]: #examples-33

[323]: #matcherstocontain-1

[324]: #parameters-81

[325]: #examples-34

[326]: #matcherstoequal

[327]: #parameters-82

[328]: #examples-35

[329]: #matcherstoequal-1

[330]: #parameters-83

[331]: #examples-36

[332]: #matcherstohavebeencalled

[333]: #examples-37

[334]: #matcherstohavebeencalled-1

[335]: #examples-38

[336]: #matcherstohavebeencalledbefore

[337]: #parameters-84

[338]: #examples-39

[339]: #matcherstohavebeencalledbefore-1

[340]: #parameters-85

[341]: #examples-40

[342]: #matcherstohavebeencalledtimes

[343]: #parameters-86

[344]: #examples-41

[345]: #matcherstohavebeencalledtimes-1

[346]: #parameters-87

[347]: #examples-42

[348]: #matcherstohavebeencalledwith

[349]: #parameters-88

[350]: #examples-43

[351]: #matcherstohavebeencalledwith-1

[352]: #parameters-89

[353]: #examples-44

[354]: #matcherstomatch

[355]: #parameters-90

[356]: #examples-45

[357]: #matcherstomatch-1

[358]: #parameters-91

[359]: #examples-46

[360]: #matcherstothrow

[361]: #parameters-92

[362]: #examples-47

[363]: #matcherstothrow-1

[364]: #parameters-93

[365]: #examples-48

[366]: #matcherstothrowerror

[367]: #parameters-94

[368]: #examples-49

[369]: #matcherstothrowerror-1

[370]: #parameters-95

[371]: #examples-50

[372]: #implementationcallback

[373]: #parameters-96

[374]: #implementationcallback-1

[375]: #parameters-97

[376]: #jasmine-1

[377]: #jasmine-2

[378]: #jasmineaddcustomequalitytester

[379]: #parameters-98

[380]: #jasmineaddcustomequalitytester-1

[381]: #parameters-99

[382]: #jasmineaddmatchers

[383]: #parameters-100

[384]: #jasmineaddmatchers-1

[385]: #parameters-101

[386]: #jasmineclock

[387]: #jasmineclock-1

[388]: #spy

[389]: #spy-1

[390]: #spycalldata

[391]: #properties-8

[392]: #spycalldata-1

[393]: #properties-9

[394]: #spyand

[395]: #spyand-1

[396]: #examples-51

[397]: #spyandidentity

[398]: #spyandexec

[399]: #spyandcallthrough

[400]: #spyandreturnvalue

[401]: #parameters-102

[402]: #spyandreturnvalues

[403]: #parameters-103

[404]: #spyandthrowerror

[405]: #parameters-104

[406]: #spyandcallfake

[407]: #parameters-105

[408]: #spyandstub

[409]: #result-4

[410]: #properties-10

[411]: #result-5

[412]: #properties-11

[413]: #global

[414]: #require--instantiate-1

[415]: #jasminetruthy

[416]: #jasminefalsy

[417]: #jasmineempty

[418]: #jasminenotempty

[419]: #jasminemapcontaining

[420]: #parameters-106

[421]: #jasminesetcontaining

[422]: #parameters-107

[423]: #configuration

[424]: #configurationrandom

[425]: #configurationseed

[426]: #configurationfailfast

[427]: #configurationfailspecwithnoexpectations

[428]: #configurationonefailureperspec

[429]: #configurationspecfilter

[430]: #configurationhidedisabled

[431]: #configurationpromise

[432]: #envconfigure

[433]: #parameters-108

[434]: #envconfiguration

[435]: #envthrowonexpectationfailure

[436]: #parameters-109

[437]: #envstoponspecfailure

[438]: #parameters-110

[439]: #envrandomizetests

[440]: #parameters-111

[441]: #envseed

[442]: #parameters-112

[443]: #envhidedisabled

[444]: #envprovidefallbackreporter

[445]: #parameters-113

[446]: #envclearreporters

[447]: #envsetspecproperty

[448]: #parameters-114

[449]: #envsetsuiteproperty

[450]: #parameters-115

[451]: #matcherswithcontext

[452]: #parameters-116

[453]: #matchersnot

[454]: #examples-52

[455]: #async-matchers

[456]: #async-matcherswithcontext

[457]: #parameters-117

[458]: #async-matchersnot

[459]: #examples-53

[460]: #async-matcherstobepending

[461]: #examples-54

[462]: #async-matcherstoberejected

[463]: #examples-55

[464]: #async-matcherstoberejectedwith

[465]: #parameters-118

[466]: #examples-56

[467]: #async-matcherstoberejectedwitherror

[468]: #parameters-119

[469]: #examples-57

[470]: #async-matcherstoberesolved

[471]: #examples-58

[472]: #async-matcherstoberesolvedto

[473]: #parameters-120

[474]: #examples-59

[475]: #matchersutil

[476]: #matchersutilpp

[477]: #parameters-121

[478]: #matchersutilcontains

[479]: #parameters-122

[480]: #matchersutilequals

[481]: #parameters-123

[482]: #matcherstobefalse

[483]: #examples-60

[484]: #matcherstobeinstanceof

[485]: #parameters-124

[486]: #examples-61

[487]: #matcherstobetrue

[488]: #examples-62

[489]: #matcherstohavebeencalledoncewith

[490]: #parameters-125

[491]: #examples-63

[492]: #matcherstohaveclass

[493]: #parameters-126

[494]: #examples-64

[495]: #matcherstohavesize

[496]: #parameters-127

[497]: #examples-65

[498]: #matcherstothrowmatching

[499]: #parameters-128

[500]: #examples-66

[501]: #setspecproperty

[502]: #parameters-129

[503]: #setsuiteproperty

[504]: #parameters-130

[505]: #jasmineaddasyncmatchers

[506]: #parameters-131

[507]: #jasmineaddcustomobjectformatter

[508]: #parameters-132

[509]: #jasmineaddspystrategy

[510]: #parameters-133

[511]: #jasminesetdefaultspystrategy

[512]: #parameters-134

[513]: #examples-67

[514]: #spywithargs

[515]: #parameters-135

[516]: #examples-68

[517]: #spystrategy

[518]: #spystrategyidentity

[519]: #spystrategyresolveto

[520]: #parameters-136

[521]: #spystrategyrejectwith

[522]: #parameters-137

[523]: #spystrategyexec

[524]: #spystrategycallthrough

[525]: #spystrategyreturnvalue

[526]: #parameters-138

[527]: #spystrategyreturnvalues

[528]: #parameters-139

[529]: #spystrategythrowerror

[530]: #parameters-140

[531]: #spystrategycallfake

[532]: #parameters-141

[533]: #spystrategystub

[534]: #getoutputlength

[535]: #parameters-142

[536]: #getoutputlength-1

[537]: #parameters-143

[538]: #bytetohex

[539]: #bytetohex-1

[540]: #bytetohex-2

[541]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String

[542]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object

[543]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number

[544]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean

[545]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/undefined

[546]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function

[547]: #env

[548]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor

[549]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp

[550]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array

[551]: #spy

[552]: it

[553]: pending

[554]: describe

[555]: afterAll

[556]: #reporter

[557]: SuiteResult

[558]: #spycalldata

[559]: #clock

[560]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date

[561]: expect

[562]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error

[563]: beforeEach

[564]: beforeAll

[565]: spyOn

[566]: spyOnProperty

[567]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map

[568]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set

[569]: #configuration

[570]: SpecResult

[571]: #matchers

[572]: expectAsync

[573]: #async-matchers

[574]: #spystrategy
